{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MarkdownPreview","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","expanded","handleChange","bind","assertThisInitialized","togglePreview","toggleEditor","e","setState","target","value","marked","setOptions","renderer","Renderer","highlight","code","hljs","highlightAuto","breaks","__html","react_default","a","createElement","className","App_Editor","App_Preview","getMarkup","React","Component","Editor","classes","App_EditorToggle","toggleExpand","id","onChange","Preview","App_PreviewToggle","dangerouslySetInnerHTML","EditorToggle","onClick","index_es","icon","faCompress","faExpand","PreviewToggle","App","App_MarkdownPreview","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.602d856c.chunk.js","sourcesContent":["import React from 'react';\r\nimport marked from 'marked';\r\nimport hljs from 'highlight.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExpand } from '@fortawesome/free-solid-svg-icons';\r\nimport { faCompress } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.scss';\r\n\r\nclass MarkdownPreview extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markdown: \r\n`# React Markdown Previewer\r\n## Free Code Camp Front End Library Project\r\n[FreeCodeCamp.com](https://learn.freecodecamp.org/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer)\\n\r\nInline \\`code\\`\r\n\\`\\`\\`\r\nvar name = \"Alex\"\r\nfunction printName(name) {\r\n  hello + \" \" + name\r\n}\r\n\\`\\`\\`\r\n>Quote\r\n\r\n- List item\r\n\r\n**bold**\r\n\r\n![markdown logo](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Markdown logo\")\r\n`,\r\n      expanded: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.togglePreview = this.togglePreview.bind(this)\r\n    this.toggleEditor = this.toggleEditor.bind(this)\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      markdown: e.target.value\r\n    })\r\n  }\r\n  getMarkup() {\r\n    marked.setOptions({\r\n      renderer: new marked.Renderer(),\r\n      highlight: function(code) {\r\n        return hljs.highlightAuto(code).value;\r\n      },\r\n      breaks: true\r\n    });\r\n    var rawMarkup = marked(this.state.markdown);\r\n    return { __html: rawMarkup };\r\n  }\r\n  togglePreview() {\r\n    if (this.state.expanded === \"editor\" || this.state.expanded === \"\") {\r\n      this.setState ({\r\n        expanded: \"preview\"\r\n      })\r\n    } else {\r\n      this.setState ({\r\n        expanded: \"\"\r\n      })\r\n    } \r\n  }\r\n  toggleEditor() {\r\n    if (this.state.expanded === \"preview\" || this.state.expanded === \"\") {\r\n      this.setState ({\r\n        expanded: \"editor\"\r\n      })\r\n    } else {\r\n      this.setState ({\r\n        expanded: \"\"\r\n      })\r\n    } \r\n  }\r\n  render() {\r\n    return(\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <div className=\"columns is-variable is-8\">\r\n            <Editor expanded={this.state.expanded} toggleEditor={this.toggleEditor} markdown={this.state.markdown} handleChange={this.handleChange}  />\r\n            <Preview expanded={this.state.expanded} togglePreview={this.togglePreview} getMarkup={this.getMarkup()} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nconst Editor = (props) => {\r\n\r\n    var classes = (props.expanded === \"editor\") ? \"editor-wrapper column\" : (props.expanded === \"preview\") ? \"editor-wrapper hide\" : \"editor-wrapper column\" \r\n\r\n    return (\r\n      <div className={classes}>\r\n        <div className=\"title\">\r\n          <h3>Editor</h3>\r\n          <EditorToggle expanded={props.expanded} toggleExpand={props.toggleEditor}/>\r\n        </div>\r\n        <textarea id=\"editor\" onChange={props.handleChange} value={props.markdown}></textarea>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst Preview = (props) => {\r\n\r\n  var classes = (props.expanded === \"preview\") ? \"preview-wrapper column\" : (props.expanded === \"editor\") ? \"preview-wrapper hide\" : \"preview-wrapper column\" \r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className=\"title\">\r\n        <h3>Preview</h3>\r\n        <PreviewToggle expanded={props.expanded} toggleExpand={props.togglePreview}/>\r\n      </div>\r\n      <div id=\"preview\" dangerouslySetInnerHTML={props.getMarkup}>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Stateless functional component\r\nconst EditorToggle = (props) => {\r\n  if (props.expanded === \"editor\") {\r\n    return (\r\n      <span className=\"icon\" onClick={props.toggleExpand}>\r\n        <FontAwesomeIcon icon={faCompress} />\r\n      </span>\r\n    )\r\n  } else {\r\n    return (\r\n      <span className=\"icon\" onClick={props.toggleExpand}>\r\n        <FontAwesomeIcon icon={faExpand} />\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\n// Stateless functional component\r\nconst PreviewToggle = (props) => {\r\n  if (props.expanded === \"preview\") {\r\n    return (\r\n      <span className=\"icon\" onClick={props.toggleExpand}>\r\n        <FontAwesomeIcon icon={faCompress} />\r\n      </span>\r\n    )\r\n  } else {\r\n    return (\r\n      <span className=\"icon\" onClick={props.toggleExpand}>\r\n        <FontAwesomeIcon icon={faExpand} />\r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\n// Using state to toggle an element\r\nclass ToggleButton1 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visibility: false\r\n    };\r\n\r\n    this.toggleVisibility = this.toggleVisibility.bind(this)\r\n\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (this.state.visibility) {\r\n      this.setState({\r\n        visibility: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        visibility: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.visibility) {\r\n      return (\r\n        <span className=\"icon\"  onClick={this.toggleVisibility}>\r\n          <FontAwesomeIcon icon={faCompress} />\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className=\"icon\"  onClick={this.toggleVisibility}>\r\n          <FontAwesomeIcon icon={faExpand} />\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n// Using state to toggle an element\r\nclass ToggleButton2 extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      visibility: false\r\n    };\r\n\r\n    this.toggleVisibility = this.toggleVisibility.bind(this)\r\n\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (this.state.visibility) {\r\n      this.setState({\r\n        visibility: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        visibility: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.visibility) {\r\n      return (\r\n        <span className=\"icon\"  onClick={this.toggleVisibility}>\r\n          <FontAwesomeIcon icon={faCompress} />\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className=\"icon\"  onClick={this.toggleVisibility}>\r\n          <FontAwesomeIcon icon={faExpand} />\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <MarkdownPreview />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}